{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 1\n",
    "\n",
    "### Question 1: Homework incentives\n",
    "\n",
    "Recall the student's problem from the first lecture. We are examining the dynamic incentives that affect a student's choices to submit homework assignments. In every period $t=1,\\ldots,\\check{t}$, the student decides whether to submit an assignment or not. For your convenience, we first copy the code from the lecture's example. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "nAss = 11;\n",
    "k = 3;\n",
    "gradeScheme=@(hwGrade,assPassed,finGrade)(0.25*hwGrade*(assPassed>nAss-k)+0.75*finGrade); % Harsh\n",
    "% gradeScheme=@(hwGrade,assPassed,finGrade)(0.4*hwGrade*assPassed/nAss+0.6*finGrade); % Smooth\n",
    "effortCost = ones(1,nAss)*0.3;\n",
    "successPr = 0.9;\n",
    "hwGrade = 10;\n",
    "finGradePr = [0 0.05 0.05 0.1 0.15 0.15 0.2 0.15 0.10 0.05 0];\n",
    "u=@(grade)(grade-10*(grade<5.25));\n",
    "rho = 0.9;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "% Initialization\n",
    "v=nan(nAss+1,nAss+1); UWork=nan(nAss,nAss); UShirk=UWork; work=UWork;\n",
    "assPassed = ones(11,1)*(0:nAss);\n",
    "finGrade = (0:10)'*ones(1,nAss+1);\n",
    "v(nAss+1,:) = finGradePr*u(gradeScheme(hwGrade, assPassed, finGrade));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "% Solve by Backward Recursion\n",
    "for ass=nAss:-1:1\n",
    "    UShirk(ass,1:ass) = rho*v(ass+1,1:ass);\n",
    "    UWork(ass,1:ass) = successPr*rho*v(ass+1,2:ass+1)+(1-successPr)*UShirk(ass,1:ass)-effortCost(ass);\n",
    "    work(ass,1:ass)=UWork(ass,1:ass)>UShirk(ass,1:ass);\n",
    "    v(ass,1:ass) = max([UWork(ass,1:ass);UShirk(ass,1:ass)]);\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "work"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let $v_t(x)$ be the student's expected discounted utility just prior to deciding on assignment $t$ if (s)he has passed $x$ of the previous $t-1$ assignments."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a) **Write the Bellman equations for $v_t$, $1\\leq t<\\check{t}$, and for $v_\\check{t}$ (note that the value for the final assignment needs special attention).**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "b) **Show that these Bellman equations have a unique solution $v_t$, $1\\leq t\\leq\\check{t}$.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c) **Show that there exist an optimal strategy for submitting homework assignments that is Markovian. Express this strategy in terms of $v_t$, $1\\leq t\\leq\\check{t}$.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "d) **Using the code above, numerically analyze how the student's optimal strategy changes when the success probability `successPr` changes from below to above its current value of $0.9$, under both grading schemes. Briefly discuss.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The remaining part of this question considers a realistic modification of the original homework incentives problem. So far, we assumed that the distribution of the final grade is exogenously given. In particular, regardless of the number of assignments submitted, the probability distribution over final grades was given by"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "% finGradePr = [0 0.05 0.05 0.1 0.15 0.15 0.2 0.15 0.10 0.05 0.0];"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead, we now assume that the student can stochastically improve her or his final grade by passing more assignments. In particular, suppose that each assignment passed takes probability masses 0.01 from each of the final grades 4,5,6, and 7 and adds probability masses 0.04/3 to each of the final grades 8,9, and 10."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "e) **Is this modified problem still a nonstationary Markov decision problem? If so, how does the modification change the Bellman equations for $v_t$, $1\\leq t<\\check{t}$, and for $v_\\check{t}$?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "f) **Adapt the above code to this modified student's problem and solve it numerically. What is the effect on the student's optimal assignment submission choices? In particular, analyze how the student's actions are changed under each grading scheme. Briefly discuss.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2: Terminating a relationship\n",
    "\n",
    "In the first lecture, we also discussed the problem of terminating a relationship. For your convenience, we again copy the example's code below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "mu = -0.1;\n",
    "sigma = 0.5;\n",
    "boundX = [-3 3];\n",
    "nSuppX = 1001;\n",
    "\n",
    "suppX = boundX(1):(boundX(2)-boundX(1))/(nSuppX-1):boundX(2);\n",
    "deltaX = ones(nSuppX,1)*suppX - suppX'*ones(1,nSuppX);\n",
    "thresholdX = (deltaX(:,1:end-1)+deltaX(:,2:end))/2;\n",
    "capPi = normcdf((thresholdX-mu)/sigma);\n",
    "capPi = [capPi 1-capPi(:,end)];\n",
    "capPi(:,2:end-1) = capPi(:,2:end-1) - capPi(:,1:end-2);\n",
    "\n",
    "% Bellman operator\n",
    "rho = 0.9;\n",
    "bellman=@(v)(max([suppX+rho*(capPi*v)';zeros(1,nSuppX)])');\n",
    "\n",
    "% Solve by value function iteration\n",
    "v=0; vOld=1; dist = [];\n",
    "while max(abs(v-vOld))>1E-9\n",
    "    vOld = v;\n",
    "    v = bellman(vOld);\n",
    "    dist = [dist;max(abs(v-vOld))];\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(suppX,v) % plot of value function\n",
    "title(\"Value function\")\n",
    "xlabel(\"state x\")\n",
    "ylabel(\"expected discounted utility v\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a) **What would happen if uncertainty increases, i.e. the variance `sigma` increases. What if there would be no uncertainty? Briefly motivate your answer and modify and run the code to verify it numerically.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let $v(x)$ be the expected discounted utility just after learning that the period's state equals $x$, but prior to deciding on continuation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "b) **Write the Bellman equation for $v$.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The right hand side of this Bellman equation defines a Bellman operator on the appropriate space of value functions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "c) **Explicitly define this space of value functions, with the metric suggested by the code. Show that this metric indeed satisfies the three properties a metric should have (see the theory slides). Demonstrate that the resulting metric space is complete. Write the Bellman operator as a mapping from this space into itself.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "d) **Using all this, prove that the Bellman equation has a unique solution $v$. (Hint: first show that the Bellman operator satisfies Blackwell's sufficient conditions for a contraction.)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "e) **In the code, we use value function iteration to find the fixed point $v$. What are the convergence properties of this algorithm? How could you adapt it to ensure convergence in fewer iterations?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, show that there exists a threshold so that it is optimal to quit if the state is below this threshold and to stay if it is above it. To this end, solve the following subproblems."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "f) **Prove that the value function is weakly increasing. (Hint: Apply the contraction mapping theorem twice, first on the space of all value functions and then to the space of all weakly increasing value functions.)** "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "g) **Give an expression for the value of continuing if the state is $x$. Show that this value is strictly increasing in $x$. Conclude that this implies that the optimal stopping rule has the above threshold property.**"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Matlab",
   "language": "matlab",
   "name": "matlab"
  },
  "language_info": {
   "codemirror_mode": "octave",
   "file_extension": ".m",
   "help_links": [
    {
     "text": "MetaKernel Magics",
     "url": "https://metakernel.readthedocs.io/en/latest/source/README.html"
    }
   ],
   "mimetype": "text/x-octave",
   "name": "matlab",
   "version": "0.16.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
